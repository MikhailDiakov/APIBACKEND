version: "3.8"

x-environment-defaults: &environment-defaults
  MICROSERVICE_API_KEY: "${MICROSERVICE_API_KEY}"
  AWS_ACCESS_KEY_ID: "${AWS_ACCESS_KEY_ID}"
  AWS_SECRET_ACCESS_KEY: "${AWS_SECRET_ACCESS_KEY}"
  AWS_STORAGE_BUCKET_NAME: "${AWS_STORAGE_BUCKET_NAME}"
  AWS_S3_REGION_NAME: "${AWS_S3_REGION_NAME}"
  SECRET_KEY: "${SECRET_KEY}"
  DEBUG: "True"
  DB_NAME: "${DB_NAME}"
  DB_USER: "${DB_USER}"
  DB_PASSWORD: "${DB_PASSWORD}"
  DB_PORT: 5432
  REDIS_HOST: "redis"
  REDIS_PORT: 6379
  CELERY_BROKER_URL: "redis://redis:6379/0"
  CELERY_RESULT_BACKEND: "redis://redis:6379/0"
  STRIPE_PUBLISHABLE_KEY: "${STRIPE_PUBLISHABLE_KEY}"
  STRIPE_SECRET_KEY: "${STRIPE_SECRET_KEY}"
  STRIPE_WEBHOOK_SECRET: "${STRIPE_WEBHOOK_SECRET}"
  STRIPE_API_VERSION: "${STRIPE_API_VERSION}"
  EMAIL_HOST: "${EMAIL_HOST}"
  EMAIL_PORT: "${EMAIL_PORT}"
  EMAIL_USE_TLS: "${EMAIL_USE_TLS}"
  EMAIL_HOST_USER: "${EMAIL_HOST_USER}"
  EMAIL_HOST_PASSWORD: "${EMAIL_HOST_PASSWORD}"

services:
  # Product service (API1)
  product_service:
    build:
      context: ./API1
    volumes:
      - ./API1:/app
    ports:
      - "8000:8000"
    networks:
      - microservice-network
    depends_on:
      - product_db
    environment:
      <<: *environment-defaults
      DB_HOST: product_db
    restart: on-failure:5

  # Cart service (API2)
  cart_service:
    build:
      context: ./API2
    volumes:
      - ./API2:/app
    ports:
      - "8001:8001"
    networks:
      - microservice-network
    depends_on:
      - cart_db
      - redis
    environment:
      <<: *environment-defaults
      DB_HOST: cart_db
    restart: on-failure:5

  # Order service (API3)
  order_service:
    build:
      context: ./API3
    volumes:
      - ./API3:/app
    ports:
      - "8002:8002"
    networks:
      - microservice-network
    depends_on:
      - order_db
    environment:
      <<: *environment-defaults
      DB_HOST: order_db
    restart: on-failure:5

  # User service (API4)
  user_service:
    build:
      context: ./API4
    volumes:
      - ./API4:/app
    ports:
      - "8003:8003"
    networks:
      - microservice-network
    depends_on:
      - user_db
    environment:
      <<: *environment-defaults
      DB_HOST: user_db
    restart: on-failure:5

  # Payment service (API5)
  payment_service:
    build:
      context: ./API5
    volumes:
      - ./API5:/app
    ports:
      - "8004:8004"
    networks:
      - microservice-network
    depends_on:
      - payment_db
      - redis
    environment:
      <<: *environment-defaults
      DB_HOST: payment_db
    restart: on-failure:5

  # PostgreSQL databases for each service
  product_db:
    image: postgres:latest
    networks:
      - microservice-network
    environment:
      POSTGRES_DB: "${DB_NAME}"
      POSTGRES_USER: "${DB_USER}"
      POSTGRES_PASSWORD: "${DB_PASSWORD}"
    volumes:
      - product_db_data:/var/lib/postgresql/data
    restart: on-failure:5

  cart_db:
    image: postgres:latest
    networks:
      - microservice-network
    environment:
      POSTGRES_DB: "${DB_NAME}"
      POSTGRES_USER: "${DB_USER}"
      POSTGRES_PASSWORD: "${DB_PASSWORD}"
    volumes:
      - cart_db_data:/var/lib/postgresql/data
    restart: on-failure:5

  order_db:
    image: postgres:latest
    networks:
      - microservice-network
    environment:
      POSTGRES_DB: "${DB_NAME}"
      POSTGRES_USER: "${DB_USER}"
      POSTGRES_PASSWORD: "${DB_PASSWORD}"
    volumes:
      - order_db_data:/var/lib/postgresql/data
    restart: on-failure:5

  user_db:
    image: postgres:latest
    networks:
      - microservice-network
    environment:
      POSTGRES_DB: "${DB_NAME}"
      POSTGRES_USER: "${DB_USER}"
      POSTGRES_PASSWORD: "${DB_PASSWORD}"
    volumes:
      - user_db_data:/var/lib/postgresql/data
    restart: on-failure:5

  payment_db:
    image: postgres:latest
    networks:
      - microservice-network
    environment:
      POSTGRES_DB: "${DB_NAME}"
      POSTGRES_USER: "${DB_USER}"
      POSTGRES_PASSWORD: "${DB_PASSWORD}"
    volumes:
      - payment_db_data:/var/lib/postgresql/data
    restart: on-failure:5

  # Redis for cart and payment services
  redis:
    image: redis:latest
    networks:
      - microservice-network
    volumes:
      - redis_data:/data
    restart: on-failure:5

  # Nginx
  nginx:
    build:
      context: .
      dockerfile: conf/Dockerfile
    ports:
      - "80:80"
      - "443:443"
    networks:
      - microservice-network
    depends_on:
      - user_service
      - cart_service
      - product_service
      - order_service
      - payment_service

  # Stripe
  stripe-listener:
    image: stripe/stripe-cli
    command: >
      listen --forward-to payment_service:8004/api/v1/webhook/
    environment:
      - STRIPE_API_KEY=${STRIPE_SECRET_KEY}
      - STRIPE_DEVICE_NAME=stripe-listener
    networks:
      - microservice-network
    depends_on:
      - payment_service

  # Celery for service
  order_celery:
    build:
      context: ./API3
    command: celery -A API3 worker --loglevel=info -Q orders
    volumes:
      - ./API3:/app
    depends_on:
      - redis
      - order_db
      - order_service
    networks:
      - microservice-network
    environment:
      <<: *environment-defaults
      DB_HOST: order_db
    restart: on-failure:5

  user_celery:
    build:
      context: ./API4
    command: celery -A API4 worker --loglevel=info -Q users
    volumes:
      - ./API4:/app
    depends_on:
      - redis
      - user_db
      - user_service
    networks:
      - microservice-network
    environment:
      <<: *environment-defaults
      DB_HOST: user_db
    restart: on-failure:5

  # Zookeeper
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    networks:
      - microservice-network

  # Kafka
  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - microservice-network

  # Cassandra
  cassandra:
    image: cassandra:latest
    container_name: cassandra
    ports:
      - "9042:9042"
      - "7199:7199"
    environment:
      - CASSANDRA_CLUSTER_NAME=log-cluster
      - CASSANDRA_NUM_TOKENS=256
      - JVM_OPTS=-Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.port=7199 -Dcom.sun.management.jmxremote.local.only=false -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Djava.rmi.server.hostname=cassandra -Dcom.sun.management.jmxremote.rmi.port=7199
      - LOCAL_JMX=no
    volumes:
      - cassandra_data:/var/lib/cassandra
    networks:
      - microservice-network

  # Logs microservice
  logs_service:
    build:
      context: ./API6
    depends_on:
      - kafka
      - zookeeper
      - cassandra
    environment:
      KAFKA_BROKER: "kafka:9092"
      CASSANDRA_HOST: "cassandra"
    restart: on-failure:5
    networks:
      - microservice-network
  # Notifications microservice
  notifications_service:
    build:
      context: ./API7
    volumes:
      - ./API7:/app
    ports:
      - "8005:8005"
    depends_on:
      - kafka
      - zookeeper
      - notifications_db
    environment:
      <<: *environment-defaults
      KAFKA_BROKER: "kafka:9092"
      DB_HOST: notifications_db
    restart: on-failure:5
    networks:
      - microservice-network

  notifications_db:
    image: postgres:latest
    networks:
      - microservice-network
    environment:
      POSTGRES_DB: "${DB_NAME}"
      POSTGRES_USER: "${DB_USER}"
      POSTGRES_PASSWORD: "${DB_PASSWORD}"
    volumes:
      - notifications_db_data:/var/lib/postgresql/data
    restart: on-failure:5

  notifications_celery:
    build:
      context: ./API7
    command: celery -A API7 worker --loglevel=info -Q notifications
    volumes:
      - ./API7:/app
    depends_on:
      - redis
      - notifications_db
      - notifications_service
    networks:
      - microservice-network
    environment:
      <<: *environment-defaults
      DB_HOST: notifications_db
    restart: on-failure:5

  # Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - prometheus_data:/prometheus
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      - microservice-network
    restart: always

  # Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    volumes:
      - grafana_data:/var/lib/grafana
    ports:
      - "3000:3000"
    networks:
      - microservice-network
    restart: always

  # Postgres Exporter
  postgres_exporter:
    image: wrouesnel/postgres_exporter
    container_name: postgres_exporter
    environment:
      DATA_SOURCE_NAME: "postgresql://${DB_USER}:${DB_PASSWORD}@product_db:5432/${DB_NAME}?sslmode=disable"
    networks:
      - microservice-network
    restart: always
    ports:
      - "9187:9187"

  # Redis Exporter
  redis_exporter:
    image: oliver006/redis_exporter
    container_name: redis_exporter
    environment:
      - REDIS_ADDR=redis:6379
    networks:
      - microservice-network
    restart: always
    ports:
      - "9121:9121"

  # Kafka Exporter
  kafka-exporter:
    image: danielqsj/kafka-exporter
    container_name: kafka-exporter
    command:
      - "--kafka.server=kafka:9092"
    ports:
      - 9308:9308
    networks:
      - microservice-network

  # Cassandra Exporter

  # Celery Exporter
  celery_exporter:
    image: ovalmoney/celery-exporter
    container_name: celery_exporter
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_NAMESPACE=celery
    networks:
      - microservice-network
    restart: always
    ports:
      - "5555:5555"

networks:
  microservice-network:
    driver: bridge

volumes:
  product_db_data:
  cart_db_data:
  order_db_data:
  user_db_data:
  payment_db_data:
  notifications_db_data:
  redis_data:
  cassandra_data:
  prometheus_data:
  grafana_data:
